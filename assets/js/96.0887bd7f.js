(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{504:function(e,a,n){"use strict";n.r(a);var t=n(2),s=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"client-kill-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-kill-all"}},[e._v("#")]),e._v(" client kill all")]),e._v(" "),a("p",[e._v("删除全部的客户端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net:8221> client kill all\nOK\nxxx.qihoo.net:8221>\n")])])]),a("h2",{attrs:{id:"bgsave"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bgsave"}},[e._v("#")]),e._v(" bgsave")]),e._v(" "),a("p",[e._v("执行方式和redis一样。但是异步dump完后，数据库保存在dump_path目录下，dump出来的数据库包含dump_prefix和dump时间等信息；")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net:8221> BGSAVE\n20160422134755 : 2213: 32582292\n")])])]),a("p",[e._v("返回的信息包括dump的时间（20160422134755）和当前的binlog位置，即文件号：偏移量（2213: 32582292）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net # ll /data3/pika_test/dump/\n总用量 0\ndrwxr-xr-x 1 root root 42 4月  22 13:47 pika8221-20160422\n")])])]),a("p",[e._v('"/data3/pika_test/dump/"是dump的路径，"pika9221-"为dump_prefix，20160422是dump的日期')]),e._v(" "),a("h2",{attrs:{id:"delbackup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delbackup"}},[e._v("#")]),e._v(" delbackup")]),e._v(" "),a("p",[e._v("删除dump目录下除正在使用（全同步中）的db快照外的其他快照")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net:8221> DELBACKUP\nOK\n")])])]),a("h2",{attrs:{id:"info-keyspace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#info-keyspace"}},[e._v("#")]),e._v(" info keyspace")]),e._v(" "),a("p",[e._v("执行方式是“info keyspace 1”，“info keyspace 0”和”info keyspace“， “info keyspace”和“info keyspace 0”等价；"),a("br"),e._v("\ninfo keyspace 1： 异步开始一次keyspace的扫描，并返回已完成的上一次keyspace扫描的结果"),a("br"),e._v("\ninfo keyspace 0: 返回已完成的上一次keyspace扫描的结果")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net:8221> info keyspace 1\n# Keyspace\n# Time:1970-01-01 08:00:00\nkv keys:0\nhash keys:0\nlist keys:0\nzset keys:0\nset keys:0\nxxx.qihoo.net:8221> info keyspace\n# Keyspace\n# Time:2016-04-22 13:45:54\nkv keys:13\nhash keys:0\nlist keys:0\nzset keys:0\nset keys:0\n")])])]),a("h2",{attrs:{id:"config-get-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-get-set"}},[e._v("#")]),e._v(" config get/set *")]),e._v(" "),a("p",[e._v("config get和config set的用法和redis是一样的，但是选项可能会有所不同，所以配了两个命令")]),e._v(" "),a("ol",[a("li",[e._v("config get *")]),e._v(" "),a("li",[e._v("config set * 用于分别列出config get和config set所能操作的选项")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('xxx.qihoo.net:8221> config get *\n 1) "port"\n 2) "thread_num"\n 3) "log_path"\n 4) "log_level"\n 5) "db_path"\n 6) "maxmemory"\n 7) "write_buffer_size"\n 8) "timeout"\n 9) "requirepass"\n10) "userpass"\n11) "userblacklist"\n12) "daemonize"\n13) "dump_path"\n14) "dump_prefix"\n15) "pidfile"\n16) "maxconnection"\n17) "target_file_size_base"\n18) "expire_logs_days"\n19) "expire_logs_nums"\n20) "root_connection_num"\n21) "slowlog_log_slower_than"\n22) "slave-read-only"\n23) "binlog_file_size"\n24) "compression"\n25) "db_sync_path"\n26) "db_sync_speed"\nxxx.qihoo.net:8221> config set *\n 1) "log_level"\n 2) "timeout"\n 3) "requirepass"\n 4) "userpass"\n 5) "userblacklist"\n 6) "dump_prefix"\n 7) "maxconnection"\n 8) "expire_logs_days"\n 9) "expire_logs_nums"\n10) "root_connection_num"\n11) "slowlog_log_slower_than"\n12) "slave-read-only"\n13) "db_sync_speed"\nbada06.add.zwt.qihoo.net:8221>\n')])])]),a("h2",{attrs:{id:"compact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compact"}},[e._v("#")]),e._v(" compact")]),e._v(" "),a("p",[e._v("因为pika底层存储引擎是基于rocksdb改造来的，会存在读写和空间放大的问题，除了rocksdb的自动compaction，pika也设置了一个手动compaction的命令，以强制compact整个kespace内的内容，支持对单个数据结构进行compact，语法为：compact [string/hash/set/zset/list/all]")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xxx.qihoo.net:8221> compact\nOK\n")])])]),a("p",[e._v("一般keyspace比较大时，执行完compact命令后，占用空间会显著减小，但是耗时比较长，对读写性能也有影响，所以建议在流量不大的情况下执行")]),e._v(" "),a("h2",{attrs:{id:"readonly-3-1之后版本废除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readonly-3-1之后版本废除"}},[e._v("#")]),e._v(" readonly （3.1之后版本废除）")]),e._v(" "),a("p",[e._v("该命令用户设置服务器的写权限；执行方式为： 1）“readonly on”"),a("br"),e._v("\n2）“readonly off”"),a("br"),e._v("\n3）“readonly 1”"),a("br"),e._v("\n4）“readonly 0” 其中1）和3）等价，2）和4）等价")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('xxx.qihoo.net:8221> set a b\nOK\nxxx.qihoo.net:8221> get a\n"b"\nxxx.qihoo.net:8221> readonly 1\nOK\nxxx.qihoo.net:8221> set a c\n(error) ERR Server in read-only\nxxx.qihoo.net:8221> get a\n"b"\nxxx.qihoo.net:8221> readonly 0\nOK\nxxx.qihoo.net:8221> set a c\nOK\nxxx.qihoo.net:8221> get a\n"c"\nxxx.qihoo.net:8221>\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);