(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{461:function(a,t,e){"use strict";e.r(t);var i=e(2),s=Object(i.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景 ：")]),a._v(" "),t("p",[a._v("从库 Pika 得到主库的全部 DB 结构，接下来以 partition 维度做 Trysync，如果从库确认可以增量同步，从库将以 partition 为维度进行增量同步。默认使用 pika port+2000 的端口进行增量同步。")]),a._v(" "),t("h3",{attrs:{id:"binlog-结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog-结构"}},[a._v("#")]),a._v(" Binlog 结构：")]),a._v(" "),t("p",[a._v("Pika 的主从同步是使用 Binlog 来完成的，一主多从的结构 master 节点也可以给多个 slave 复用一个 Binlog，只不过不同的 slave 在 binglog 中有自己的偏移量而已，master 执行完一条写命令就将命令追加到 Binlog 中，pika 的同步模块会读出对应的 binlog 发送到 slave，而 slave 收到 binlog 后会执行并追加到自己的 Binlog 中，由于主从偏移量一样，所以一旦发生网络或节点故障需要重连主从时，slave 仅需要将自己当前的 Binlog 偏移量发送给 master，master 找到后从该偏移量开始同步后续命令，理论上将命令不做处理一条一条追加到文件中，但是这样的记录格式容错很差，如果读文件中写错一个字节则导致整个文件不可用，所以 pika 采用了类似 leveldb log 的格式来进行存储，具体如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://camo.githubusercontent.com/4c2b80464bcbb20bf12e68f81be26e79720c64154c007270b7aee4c4de80fc25/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f633263643433303767773166366d373437313762336a3230726d30676a7767772e6a7067",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"交互过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交互过程"}},[a._v("#")]),a._v(" 交互过程：")]),a._v(" "),t("p",[a._v("1，从库发送 BinlogSyncRequest 报文，报文中需说明自己已经收到的 BinlogOffset。")]),a._v(" "),t("p",[a._v("2，主库收到 BinlogSyncRequest 之后会从同步点开始发出一批 BinlogSyncResponse。")]),a._v(" "),t("p",[a._v("3，从库在收到 BinlogSyncResponse 之后，会在写入本地 binlog 之后再进行 1 流程。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://camo.githubusercontent.com/d61858c09aa226bfcb3055ff47e6dc877701837f7d79e2b25c890b76c36b521c/68747470733a2f2f692e696d6775722e636f6d2f4a5666545632322e706e67",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"同步模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步模块"}},[a._v("#")]),a._v(" 同步模块:")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://camo.githubusercontent.com/4a90d658ea5a83af174eadf78022dad300a7b598a3153709d43ee9327a31a825/68747470733a2f2f692e696d6775722e636f6d2f3542794b7073412e706e67",alt:""}})]),a._v(" "),t("p",[a._v("Pika 的同步由 ReplicaManager(RM)模块负责。RM 中有两层结构，逻辑层负责同步逻辑，传输层负责链接的管理数据的解析和传输。")]),a._v(" "),t("p",[a._v("数据的同步的最小单位是 Partition，每一个 Pika 实例会维护自己作为主的 partition(MasterPartition)和自己是从的 partition(SlavePartition)。对于 MasterPartition，需要记录跟随自己的 slave 同步信息，逻辑层会根据该信息向 slave 同步信息。对于 SlavePartition，则是需要需要记录 master 的信息，逻辑层会按照该信息按需向 master 发送同步请求。")]),a._v(" "),t("p",[a._v("逻辑层维护两个数据结构，一个是 MasterPartitions，记录跟随自己的 SlaveNode 信息，主要包括 slave 的同步状态和当前的 sessionId。另一个是 SlavePartitions，记录主的信息。")]),a._v(" "),t("p",[a._v("传输层分为两个子模块，ReplicationClient 负责发起链接的建立，ReplicationServer 负责响应报文。每两个实例之间的所有 partition 复用一条链接。")]),a._v(" "),t("h2",{attrs:{id:"同步过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步过程"}},[a._v("#")]),a._v(" 同步过程:")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://camo.githubusercontent.com/9479c5936203861720bc5a3c706b620cf42552a5bd0e24c2416e820c58eab5e2/68747470733a2f2f692e696d6775722e636f6d2f31513850626a462e706e67",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"masterpartition-同步事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#masterpartition-同步事件"}},[a._v("#")]),a._v(" MasterPartition 同步事件")]),a._v(" "),t("p",[a._v("逻辑层处理 MasterPartition 的同步事件，向其对应的从同步数据。")]),a._v(" "),t("p",[a._v("1，读取 MasterPartition Binlog 信息后，将 BinlogOffsetInfo 记录到 SlaveNode 自己的 window 中。")]),a._v(" "),t("p",[a._v("2，将 Binlog 暂存到临时的待发送队列中。")]),a._v(" "),t("p",[a._v("3，辅助线程(Auxiliary thread) 定时将临时待发送队列的数据通过 RM 的传输层发送给对应的 slave 节点。")]),a._v(" "),t("p",[a._v("4，收到 slave 的 BinlogSyncResponse 之后，得知 slave 收到的 BinlogOffset 信息，更新 SlaveNode window，重复 1 流程继续同步")]),a._v(" "),t("p",[a._v("为了控制每个 SlaveNode 同步的速度，避免某几个 SlaveNode 占用过多资源，为每一个 SlaveNode 设置了 window。如下图所示，Pika 收到了 BinlogOffset 为 100 到 200 的 ack response，从 window 中移除 BinlogOffset 位于 100 到 200 的元素，之后继续发送 BinlogOffset 为 1100 和 1200 的 binlog，对应的 BinlogOffset 添加至 window 中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://camo.githubusercontent.com/ed7808a86e0b1c55400814c718d4de086d35db8ae61e1174ba3bc0e764be42fa/68747470733a2f2f692e696d6775722e636f6d2f3047744f686b342e706e67",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"slavepartition-同步事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slavepartition-同步事件"}},[a._v("#")]),a._v(" SlavePartition 同步事件")]),a._v(" "),t("p",[a._v("逻辑层处理 SlavePartition 的同步事件，收到 master 发送的同步数据，向 master 发相应的 response 信息。")]),a._v(" "),t("p",[a._v("1，按照解析出的 Partition 信息，被分配到对应的线程处理 binlog 写入任务。")]),a._v(" "),t("p",[a._v("2，线程写入 binlog 之后，调用传输层发送 BinlogSyncResponse 信息。")]),a._v(" "),t("p",[a._v("3，根据 binlog 的 key 分配给对应的线程处理写入 db 任务。")])])}),[],!1,null,null,null);t.default=s.exports}}]);