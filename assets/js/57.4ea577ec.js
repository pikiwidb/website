(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{467:function(t,a,s){"use strict";s.r(a);var i=s(2),r=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("Pika 一款开源的高性能持久化的 NoSQL 产品，兼容 Redis 协议，数据持久化存储到 RocksDB 存储引擎，具有两种运行模式： 经典模式（Classic） & 分布式模式（Sharding）。")]),t._v(" "),a("ul",[a("li",[t._v("经典模式（Classic）： 即 1 主 N 从同步模式，1 个主实例存储所有的数据，N 个从实例完全镜像同步主实例的数据，每个实例支持多个 DBs。DB 默认从 0 开始，Pika 的配置项 databases 可以设置最大 DB 数量。DB 在 Pika 上的物理存在形式是一个文件目录。")]),t._v(" "),a("li",[t._v("分布式模式（Sharding）： Sharding 模式下，将用户存储的数据集合称为 Table，每个 Table 切分成多个分片，每个分片称为 Slot，对于某一个 KEY 的数据由哈希算法计算决定属于哪个 Slot。将所有 Slots 及其副本按照一定策略分散到所有的 Pika 实例中，每个 Pika 实例有一部分主 Slot 和一部分从 Slot。在 Sharding 模式下，分主从的是 Slot 而不再是 Pika 实例。Slot 在 Pika 上的物理存在形式是一个文件目录。")])]),t._v(" "),a("p",[t._v("Pika 可以通过配置文件中的 instance-mode 配置项，设置为 classic 和 sharding，来选择运行经典模式（Classic）还是分布式模式（Sharding）的 Pika。")]),t._v(" "),a("h2",{attrs:{id:"_1-经典-主从-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-经典-主从-模式"}},[t._v("#")]),t._v(" 1. 经典（主从）模式")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/simpcl/simpcl.github.io/master/PikaClassic.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_2-分布式模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式模式"}},[t._v("#")]),t._v(" 2. 分布式模式")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/simpcl/simpcl.github.io/master/PikaCluster.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);